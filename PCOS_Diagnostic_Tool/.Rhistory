#####################################################
help(state.x77)
state.x77 #Investigating the state.x77 dataset.
states = as.data.frame(state.x77) #Forcing the state.x77 dataset to be a dataframe.
#Cleaning up the column names so that there are no spaces.
colnames(states)[4] = "Life.Exp"
colnames(states)[6] = "HS.Grad"
#Creating a population density variable.
states[,9] = (states$Population*1000)/states$Area
colnames(states)[9] = "Density"
#Basic numerical EDA for states dataset.
summary(states)
sapply(states, sd)
cor(states)
#Basic graphical EDA for the states dataset.
plot(states)
sapply(states, sd)
cor(states)
#Basic graphical EDA for the states dataset.
plot(states)
#Creating a saturated model (a model with all variables included).
model.saturated = lm(Life.Exp ~ ., data = states)
summary(model.saturated) #Many predictor variables are not significant, yet the
plot(model.saturated) #Assessing the assumptions of the model.
library(car) #Companion to applied regression.
influencePlot(model.saturated)
vif(model.saturated) #Assessing the variance inflation factors for the variables
source("C:/Users/sarah/Downloads/MultipleLinearRegression (1).R", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
restaurants = read.table("https://s3.amazonaws.com/nycdsabt01/NYC_Restaurants.txt")
avPlots?
head(restaurants)
ggplot(restaurants, aes(x = Food, y = Price)) +
geom_point(color = Location)
restaurants = read.table("https://s3.amazonaws.com/nycdsabt01/NYC_Restaurants.txt")
library(ggplot2)
library(dplyr)
library(broom)
ggplot(restaurants, aes(x = Food, y = Price)) +
geom_point(color = Location)
ggplot(restaurants, aes(x = Food, y = Price)) +
geom_point()
ggplot(restaurants, aes(x = Food, y = Price)) +
geom_point() +
facet_wrap(vars(Food, Decor, Service))
ggplot(restaurants, aes(Price)) +
geom_point() +
facet_wrap(vars(Food, Decor, Service))
ggplot(restaurants, aes(y = Price)) +
geom_point() +
facet_wrap(vars(Food, Decor, Service))
ggplot(restaurants, aes(x = Food, y = Price, color = Location)) +
geom_point()
ggplot(restaurants, aes(x = Food, y = Price)) +
geom_point(aes(color = Location))
ggplot(restaurants, aes(x = Food, y = Price)) +
geom_point(aes(color = Location))
ggplot(restaurants, aes(x = Food, y = Price)) +
geom_point(aes(color = Location))
ggplot(restaurants, aes(x = Decor, y = Price)) +
geom_point(aes(color = Location))
ggplot(restaurants, aes(x = Service, y = Price)) +
geom_point(aes(color = Location))
lm(price ~ Decor + Location, restaurants)
lm(Price ~ Decor + Location, restaurants)
plot(restaurants[, 2:5])
#It looks like Decor is highly concentrated in one area vs. evenly dispersed.
plot(restaurants[, 2:5], col = restaurants$Location)
plot(restaurants[, 2:5], col = as.factor(restaurants$Location))
#It looks like Decor is highly concentrated in one area vs. evenly dispersed.
lm(Price ~ . - Restaurant, data = restaurants)
model = lm(Pric(e ~ . - Restaurant, data = restaurants)
summary(model)
model = lm(Price ~ . - Restaurant, data = restaurants)
summary(model)
plot(model
plot(model)
library(car)
influencePlot(model)
vif(model)
avPlots(model)
model_service = lm(Price ~ Service, restaurants)
summary(model_service)
model_food_decor_location = lm(Price ~ Food + Decor + Location, restaurants)
summary(model_food_decor_location)
plot(model_food_decor_location)
vif(model_food_decor_location)
avPlots(model_food_decor_location)
model_food_decor = lm(Price ~ Food + Decor, restaurants)
summary(model_food_decor)
plot(model_food_decor)
vif(model_food_decor)
avPlots(model_food_decor)
AIC(model, model_service, model_food_decor, model_food_decor_location)
VIC(model, model_service, model_food_decor, model_food_decor_location)
AIC(model, model_service, model_food_decor, model_food_decor_location)
BIC(model, model_service, model_food_decor, model_food_decor_location)
AIC(model, model_service, model_food_decor, model_food_decor_location)
BIC(model, model_service, model_food_decor, model_food_decor_location)
glance(model, model_service, model_food_decor, model_food_decor_location)
AIC(model, model_service, model_food_decor, model_food_decor_location)
BIC(model, model_service, model_food_decor, model_food_decor_location)
pull(model$r_square)
AIC(model, model_service, model_food_decor, model_food_decor_location)
BIC(model, model_service, model_food_decor, model_food_decor_location)
summary(model)$r.squared
summary(model_service)$r.squared
summary(model_food_decor)$r.squared
summary(model_food_decor_location)$r.squared
iter = 1000
n = 1000
sig = 0
for(i in 1:n){
df = data.frame(x = 1:n, y = rnorm(n))
m = lm(y ~ x, df)
sig = sig + (summary(m)$coefficients["x", 4] <= 0.05)
}
sig/iter
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
install.packages("lattice")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(MASS)
library(tidyverse)
library(caret)
library(MASS)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(ggplot2)
library(cowplot)
library(car)
File = "PCOS_data_without_infertility.xlsx"
PCOS_df = read_xlsx(File, sheet = "Full_new")
head(PCOS_df)
str(PCOS_df)
colnames(PCOS_df)
#Drop Sl. No., Patient File No., 45, Cycle(R/I)
PCOS_df = select(PCOS_df, -c("Sl. No", "Patient File No.", "Cycle(R/I)", "...45"))
library(readxl)
library(dplyr)
library(ggplot2)
library(cowplot)
library(car)
File = "PCOS_data_without_infertility.xlsx"
PCOS_df = read_xlsx(File, sheet = "Full_new")
head(PCOS_df)
str(PCOS_df)
colnames(PCOS_df)
#Drop Sl. No., Patient File No., 45, Cycle(R/I)
PCOS_df = select(PCOS_df, -c("Sl. No", "Patient File No.", "Cycle(R/I)", "...45"))
#Convert PCOS, Pregnant, Weight Gain, Hair Growth, Skin Darkening, Hair Loss, Pimples, Fast Food, Reg Exercise to factors.
PCOS_df$`PCOS (Y/N)` = as.factor(PCOS_df$`PCOS (Y/N)`)
PCOS_df$`Pregnant(Y/N)` = as.factor(PCOS_df$`Pregnant(Y/N)`)
PCOS_df$`Weight gain(Y/N)` = as.factor(PCOS_df$`Weight gain(Y/N)`)
PCOS_df$`hair growth(Y/N)` = as.factor(PCOS_df$`hair growth(Y/N)`)
PCOS_df$`Skin darkening (Y/N)` = as.factor(PCOS_df$`Skin darkening (Y/N)`)
PCOS_df$`Hair loss(Y/N)` = as.factor(PCOS_df$`Hair loss(Y/N)`)
PCOS_df$`Pimples(Y/N)` = as.factor(PCOS_df$`Pimples(Y/N)`)
PCOS_df$`Fast food (Y/N)` = as.factor(PCOS_df$`Fast food (Y/N)`)
PCOS_df$`Reg.Exercise(Y/N)` = as.factor(PCOS_df$`Reg.Exercise(Y/N)`)
str(PCOS_df)
#Drop Sl. No., Patient File No., 45, Cycle(R/I)
PCOS_df = select(PCOS_df, -c("Sl. No", "Patient File No.", "Cycle(R/I)", "...45"))
?subset()
#Drop Sl. No., Patient File No., 45, Cycle(R/I)
select(PCOS_df, -c("Sl. No", "Patient File No.", "Cycle(R/I)", "...45"))
#Drop Sl. No., Patient File No., 45, Cycle(R/I)
PCOS_df["Sl. No", "Patient File No.", "Cycle(R/I)", "...45"]
#Drop Sl. No., Patient File No., 45, Cycle(R/I)
PCOS_df["Sl. No" & "Patient File No." & "Cycle(R/I)" & "...45"]
#Drop Sl. No., Patient File No., 45, Cycle(R/I)
subset(PCOS_df, select = -c("Sl. No", "Patient File No.", "Cycle(R/I)", "...45"))
#Drop Sl. No., Patient File No., 45, Cycle(R/I)
subset(PCOS_df, select = c("Sl. No", "Patient File No.", "Cycle(R/I)", "...45"))
#Drop Sl. No., Patient File No., 45, Cycle(R/I)
subset(PCOS_df, select = -c("Sl. No", "Patient File No.", "Cycle(R/I)", "...45"))
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(ggplot2)
library(cowplot)
library(car)
File = "PCOS_data_without_infertility.xlsx"
PCOS_df = read_xlsx(File, sheet = "Full_new")
head(PCOS_df)
str(PCOS_df)
colnames(PCOS_df)
#Drop Sl. No., Patient File No., 45, Cycle(R/I)
PCOS_df = select(PCOS_df, -c("Sl. No", "Patient File No.", "Cycle(R/I)", "...45"))
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(ggplot2)
library(cowplot)
library(car)
File = "PCOS_data_without_infertility.xlsx"
PCOS_df = read_xlsx(File, sheet = "Full_new")
head(PCOS_df)
str(PCOS_df)
colnames(PCOS_df)
#Drop Sl. No., Patient File No., 45, Cycle(R/I)
PCOS_df = select(PCOS_df, -c("Sl. No", "Patient File No.", "Cycle(R/I)", "...45"))
#Convert PCOS, Pregnant, Weight Gain, Hair Growth, Skin Darkening, Hair Loss, Pimples, Fast Food, Reg Exercise to factors.
PCOS_df$`PCOS (Y/N)` = as.factor(PCOS_df$`PCOS (Y/N)`)
PCOS_df$`Pregnant(Y/N)` = as.factor(PCOS_df$`Pregnant(Y/N)`)
PCOS_df$`Weight gain(Y/N)` = as.factor(PCOS_df$`Weight gain(Y/N)`)
PCOS_df$`hair growth(Y/N)` = as.factor(PCOS_df$`hair growth(Y/N)`)
PCOS_df$`Skin darkening (Y/N)` = as.factor(PCOS_df$`Skin darkening (Y/N)`)
PCOS_df$`Hair loss(Y/N)` = as.factor(PCOS_df$`Hair loss(Y/N)`)
PCOS_df$`Pimples(Y/N)` = as.factor(PCOS_df$`Pimples(Y/N)`)
PCOS_df$`Fast food (Y/N)` = as.factor(PCOS_df$`Fast food (Y/N)`)
PCOS_df$`Reg.Exercise(Y/N)` = as.factor(PCOS_df$`Reg.Exercise(Y/N)`)
str(PCOS_df)
#II beta-HCG and AMH to integers.
PCOS_df$`II    beta-HCG(mIU/mL)` = as.integer(PCOS_df$`II    beta-HCG(mIU/mL)`)
PCOS_df$`AMH(ng/mL)` = as.integer(PCOS_df$`AMH(ng/mL)`)
#Check for NAs.
summary(PCOS_df)
which(is.na(PCOS_df$`Marraige Status (Yrs)`))
which(is.na(PCOS_df$`II    beta-HCG(mIU/mL)`))
which(is.na(PCOS_df$`AMH(ng/mL)`))
which(is.na(PCOS_df$`Fast food (Y/N)`))
PCOS_df = PCOS_df[!is.na(PCOS_df$`Marraige Status (Yrs)`) & !is.na(PCOS_df$`II    beta-HCG(mIU/mL)`) & !is.na(PCOS_df$`AMH(ng/mL)`) & !is.na(PCOS_df$`Fast food (Y/N)`), ]
summary(PCOS_df)
PCOS_df$`Blood Group` = as.character(PCOS_df$`Blood Group`)
PCOS_df["Blood Group"][PCOS_df["Blood Group"] == 11] = "A+"
PCOS_df["Blood Group"][PCOS_df["Blood Group"] == 12] = "A-"
PCOS_df["Blood Group"][PCOS_df["Blood Group"] == 13] = "B+"
PCOS_df["Blood Group"][PCOS_df["Blood Group"] == 14] = "B-"
PCOS_df["Blood Group"][PCOS_df["Blood Group"] == 15] = "O+"
PCOS_df["Blood Group"][PCOS_df["Blood Group"] == 16] = "O-"
PCOS_df["Blood Group"][PCOS_df["Blood Group"] == 17] = "AB+"
PCOS_df["Blood Group"][PCOS_df["Blood Group"] == 18] = "AB-"
PCOS_df = fastDummies::dummy_cols(PCOS_df, select_columns = "Blood Group", remove_first_dummy = TRUE, remove_selected_columns = TRUE)
sample = sample(c(TRUE, FALSE), nrow(PCOS_df), replace = TRUE, prob = c(0.7, 0.3))
train = PCOS_df[sample, ]
test = PCOS_df[!sample, ]
saturated_model = glm(`PCOS (Y/N)` ~ ., family ="binomial", data = train)
vif_values = vif(saturated_model)
vif_values
reduced_sat_model = glm(`PCOS (Y/N)` ~ . -`Weight (Kg)` - `Hip(inch)` - `Height(Cm)` - `Waist(inch)` - `Waist:Hip Ratio`, family ="binomial", data = train)
reduced_vif_values = vif(reduced_sat_model)
reduced_vif_values
summary(reduced_sat_model)
scatter.smooth(reduced_sat_model$fit,
residuals(reduced_sat_model, type = "deviance"),
lpars = list(col = "red"),
xlab = "Fitted Probabilities",
ylab = "Deviance Residual Values",
main = "Residual Plot for\nLogistic Regression of PCOS Data")
abline(h = 0, lty = 2)
no_follicle_no_r = glm(`PCOS (Y/N)` ~ . -`Follicle No. (R)`, family ="binomial", data = train)
summary(no_follicle_no_r)
sig_feat_model1 = glm(`PCOS (Y/N)` ~ `Pulse rate(bpm)` + `Cycle length(days)` + `Weight gain(Y/N)` + `hair growth(Y/N)` +
`Skin darkening (Y/N)` + `Pimples(Y/N)` + `Fast food (Y/N)` + `Follicle No. (L)` + `Follicle No. (R)` + `Avg. F size (R) (mm)`, family ="binomial", data = train)
summary(sig_feat_model1)
pchisq(sig_feat_model1$deviance - reduced_sat_model$deviance, sig_feat_model1$df.residual - reduced_sat_model$df.residual, lower.tail = F)
sig_feat_model2 = glm(`PCOS (Y/N)` ~ `Weight gain(Y/N)` + `hair growth(Y/N)` + `Skin darkening (Y/N)` +
`Pimples(Y/N)` + `Follicle No. (L)` + `Follicle No. (R)`, family ="binomial", data = train)
summary(sig_feat_model2)
pchisq(sig_feat_model2$deviance - sig_feat_model1$deviance, sig_feat_model2$df.residual - sig_feat_model1$df.residual, lower.tail = F)
AIC(reduced_sat_model, no_follicle_no_r, sig_feat_model1, sig_feat_model2)
BIC(reduced_sat_model, no_follicle_no_r, sig_feat_model1, sig_feat_model2)
1 - reduced_sat_model$deviance/reduced_sat_model$null.deviance
1 - no_follicle_no_r$deviance/no_follicle_no_r$null.deviance
1 - sig_feat_model1$deviance/sig_feat_model1$null.deviance
1 - sig_feat_model2$deviance/sig_feat_model2$null.deviance
sig_feat_model2_test = glm(`PCOS (Y/N)` ~ `Weight gain(Y/N)` + `hair growth(Y/N)` + `Skin darkening (Y/N)` +
`Pimples(Y/N)` + `Follicle No. (L)` + `Follicle No. (R)`, family ="binomial", data = test)
conf.mat = table(test$`PCOS (Y/N)`, round(sig_feat_model2_test$fitted.values))
sum(diag(conf.mat))/(nrow(test))
conf.mat = table(train$`PCOS (Y/N)`, round(sig_feat_model2$fitted.values))
sum(diag(conf.mat))/(nrow(train))
PCOS_df %>%
group_by(`PCOS (Y/N)`) %>%
summarise(ratio = n()/nrow(PCOS_df))
train %>%
group_by(`PCOS (Y/N)`) %>%
summarise(ratio = n()/nrow(train))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
model = glm(`PCOS (Y/N)` ~ ., data = train, family = "binomial") %>%
stepAIC(trace = FALSE)
summary(model)
colnames(train)
model = glm(`PCOS (Y/N)` ~ ., data = train, family = "binomial") %>%
stepBIC(trace = FALSE)
train %>%
dplyr::select(-c("Weight (Kg)", "Waist(inch)", "Hip(inch)", "Waist:Hip Ratio")
train %>%
dplyr::select(-c("Weight (Kg)", "Waist(inch)", "Hip(inch)", "Waist:Hip Ratio"))
train %>%
dplyr::select(-c("Weight (Kg)", "Waist(inch)", "Hip(inch)", "Waist:Hip Ratio", "Height(Cm)"))
train_2 = train %>%
dplyr::select(-c("Weight (Kg)", "Waist(inch)", "Hip(inch)", "Waist:Hip Ratio", "Height(Cm)"))
model = glm(`PCOS (Y/N)` ~ ., data = train_2, family = "binomial") %>%
stepAIC(trace = FALSE)
summary(model)
train_2 = train %>%
dplyr::select(-c("Weight (Kg)", "Waist(inch)", "Hip(inch)", "Waist:Hip Ratio", "Height(Cm)", "Marraige Status (Yrs)"))
model = glm(`PCOS (Y/N)` ~ ., data = train_2, family = "binomial") %>%
stepAIC(trace = FALSE)
summary(model)
pchisq(model$deviance - sig_feat_model2_test$deviance, model$df.residual - sig_feat_model2_test$df.residual, lower.tail = F)
########################################################
#####Example using Graduate Schools Admissions Data#####
########################################################
GradSchools = read.table("Graduate_Schools.txt")
pchisq(model$deviance, model$df.residual, lower.tail = FALSE)
pchisq(sig_feat_model2_test$deviance, sig_feat_model2_test$df.residual, lower.tail = FALSE)
pchisq(sig_feat_model1$deviance, sig_feat_model1$df.residual, lower.tail = FALSE)
pchisq(sig_feat_model2$deviance, sig_feat_model2$df.residual, lower.tail = FALSE)
pchisq(reduced_sat_model$deviance, reduced_sat_model$df.residual, lower.tail = FALSE)
AIC(reduced_sat_model, no_follicle_no_r, sig_feat_model1, sig_feat_model2, model)
BIC(reduced_sat_model, no_follicle_no_r, sig_feat_model1, sig_feat_model2, model)
1 - reduced_sat_model$deviance/reduced_sat_model$null.deviance
1 - no_follicle_no_r$deviance/no_follicle_no_r$null.deviance
1 - sig_feat_model1$deviance/sig_feat_model1$null.deviance
1 - sig_feat_model2$deviance/sig_feat_model2$null.deviance
1 - model$deviance/model$null.deviance
knitr::opts_chunk$set(echo = TRUE)
File = "PCOS_data_without_infertility.xlsx"
PCOS_df = read_xlsx(File, sheet = "Full_new")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(ggplot2)
library(cowplot)
library(car)
File = "PCOS_data_without_infertility.xlsx"
PCOS_df = read_xlsx(File, sheet = "Full_new")
head(PCOS_df)
str(PCOS_df)
colnames(PCOS_df)
#Drop Sl. No., Patient File No., 45, Cycle(R/I)
PCOS_df = select(PCOS_df, -c("Sl. No", "Patient File No.", "Cycle(R/I)", "...45"))
library(readxl)
library(dplyr)
library(ggplot2)
library(cowplot)
File = "PCOS_data_without_infertility.xlsx"
PCOS_df = read_xlsx(File, sheet = "Full_new")
head(PCOS_df)
str(PCOS_df)
colnames(PCOS_df)
#Drop Sl. No., Patient File No., 45, Cycle(R/I)
PCOS_df = select(PCOS_df, -c("Sl. No", "Patient File No.", "Cycle(R/I)", "...45"))
shiny::runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
knitr::opts_chunk$set(echo = TRUE)
ggplot(data = PCOS_df, aes(y = `hair growth(Y/N)`, fill = `PCOS (Y/N)`)) +
geom_bar(width = 0.40, color="#e9ecef", alpha=0.6, position = position_dodge(0.40)) +
geom_hline(aes(yintercept = 2), color = "coral", linetype = "dashed", size = 1, lyt = "patient value") +
scale_fill_manual(values=c("#69b3a2", "#404080"), labels = c('No PCOS', 'PCOS')) +
xlab("# of Patients") +
ylab("Hair Growth") +
ggtitle("Number of Patients Experiencing Hair Growth") +
labs(fill = "")
ggplot(data = PCOS_df, aes(y = `hair growth(Y/N)`, fill = `PCOS (Y/N)`)) +
geom_bar(width = 0.40, color="#e9ecef", alpha=0.6, position = position_dodge(0.40)) +
geom_hline(aes(yintercept = 2), color = "coral", linetype = "dashed", size = 1, lyt = "patient value") +
scale_fill_manual(values=c("#69b3a2", "#404080"), labels = c('No PCOS', 'PCOS')) +
scale_linetype_manual(values = lty) +
xlab("# of Patients") +
ylab("Hair Growth") +
ggtitle("Number of Patients Experiencing Hair Growth") +
labs(fill = "")
ggplot(data = PCOS_df, aes(y = `hair growth(Y/N)`, fill = `PCOS (Y/N)`)) +
geom_bar(width = 0.40, color="#e9ecef", alpha=0.6, position = position_dodge(0.40)) +
geom_hline(aes(yintercept = 2), color = "coral", linetype = "dashed", size = 1, lyt = "patient value") +
scale_fill_manual(values=c("#69b3a2", "#404080"), labels = c('No PCOS', 'PCOS')) +
scale_linetype_manual(values = lyt) +
xlab("# of Patients") +
ylab("Hair Growth") +
ggtitle("Number of Patients Experiencing Hair Growth") +
labs(fill = "")
ggplot(data = PCOS_df, aes(y = `hair growth(Y/N)`, fill = `PCOS (Y/N)`)) +
geom_bar(width = 0.40, color="#e9ecef", alpha=0.6, position = position_dodge(0.40)) +
geom_hline(aes(yintercept = 2), color = "coral", linetype = "dashed", size = 1, lyt = "patient value") +
scale_fill_manual(values=c("#69b3a2", "#404080"), labels = c('No PCOS', 'PCOS')) +
scale_linetype(labels = 'Patient Value') +
xlab("# of Patients") +
ylab("Hair Growth") +
ggtitle("Number of Patients Experiencing Hair Growth") +
labs(fill = "")
ggplot(data = PCOS_df, aes(y = `hair growth(Y/N)`, fill = `PCOS (Y/N)`)) +
geom_bar(width = 0.40, color="#e9ecef", alpha=0.6, position = position_dodge(0.40)) +
geom_hline(aes(yintercept = 2), color = "coral", linetype = "dashed", size = 1) +
scale_fill_manual(values=c("#69b3a2", "#404080"), labels = c('No PCOS', 'PCOS')) +
scale_linetype(labels = 'Patient Value') +
xlab("# of Patients") +
ylab("Hair Growth") +
ggtitle("Number of Patients Experiencing Hair Growth") +
labs(fill = "")
ggplot(data = PCOS_df, aes(y = `hair growth(Y/N)`, fill = `PCOS (Y/N)`)) +
geom_bar(width = 0.40, color="#e9ecef", alpha=0.6, position = position_dodge(0.40)) +
geom_abline(aes(yintercept = 2), color = "coral", linetype = "dashed", size = 1) +
scale_fill_manual(values=c("#69b3a2", "#404080"), labels = c('No PCOS', 'PCOS')) +
scale_linetype(labels = 'Patient Value') +
xlab("# of Patients") +
ylab("Hair Growth") +
ggtitle("Number of Patients Experiencing Hair Growth") +
labs(fill = "")
ggplot(data = PCOS_df, aes(y = `hair growth(Y/N)`, fill = `PCOS (Y/N)`)) +
geom_bar(width = 0.40, color="#e9ecef", alpha=0.6, position = position_dodge(0.40)) +
geom_hline(aes(yintercept = 2), color = "coral", linetype = "dashed", size = 1) +
scale_fill_manual(values=c("#69b3a2", "#404080"), labels = c('No PCOS', 'PCOS')) +
scale_linetype(labels = 'Patient Value') +
xlab("# of Patients") +
ylab("Hair Growth") +
ggtitle("Number of Patients Experiencing Hair Growth") +
labs(fill = "")
ggplot(data = PCOS_df, aes(y = `hair growth(Y/N)`, fill = `PCOS (Y/N)`)) +
geom_bar(width = 0.40, color="#e9ecef", alpha=0.6, position = position_dodge(0.40)) +
geom_hline(aes(yintercept = 2, color = "coral", linetype = "dashed", size = 1)) +
scale_fill_manual(values=c("#69b3a2", "#404080"), labels = c('No PCOS', 'PCOS')) +
xlab("# of Patients") +
ylab("Hair Growth") +
ggtitle("Number of Patients Experiencing Hair Growth") +
labs(fill = "")
ggplot(data = PCOS_df, aes(y = `hair growth(Y/N)`, fill = `PCOS (Y/N)`)) +
geom_bar(width = 0.40, color="#e9ecef", alpha=0.6, position = position_dodge(0.40)) +
geom_hline(aes(yintercept = 2, color = "coral"), linetype = "dashed", size = 1) +
scale_fill_manual(values=c("#69b3a2", "#404080"), labels = c('No PCOS', 'PCOS')) +
xlab("# of Patients") +
ylab("Hair Growth") +
ggtitle("Number of Patients Experiencing Hair Growth") +
labs(fill = "")
ggplot(data = PCOS_df, aes(y = `hair growth(Y/N)`, fill = `PCOS (Y/N)`)) +
geom_bar(width = 0.40, color="#e9ecef", alpha=0.6, position = position_dodge(0.40)) +
geom_hline(aes(yintercept = 2, color = "Patient Value"), linetype = "dashed", size = 1) +
scale_fill_manual(values=c("#69b3a2", "#404080"), labels = c('No PCOS', 'PCOS')) +
xlab("# of Patients") +
ylab("Hair Growth") +
ggtitle("Number of Patients Experiencing Hair Growth") +
labs(fill = "")
ggplot(data = PCOS_df, aes(y = `hair growth(Y/N)`, fill = `PCOS (Y/N)`)) +
geom_bar(width = 0.40, color="#e9ecef", alpha=0.6, position = position_dodge(0.40)) +
geom_hline(aes(yintercept = 2, color = "Pateint Value"), linetype = "dashed", size = 1) +
scale_fill_manual(values=c("#69b3a2", "#404080"), labels = c('No PCOS', 'PCOS')) +
xlab("# of Patients") +
ylab("Hair Growth") +
ggtitle("Number of Patients Experiencing Hair Growth") +
labs(fill = "")
ggplot(data = PCOS_df, aes(y = `hair growth(Y/N)`, fill = `PCOS (Y/N)`)) +
geom_bar(width = 0.40, color="#e9ecef", alpha=0.6, position = position_dodge(0.40)) +
geom_hline(aes(yintercept = 2, color = "Patient Value"), linetype = "dashed", size = 1) +
scale_fill_manual(values=c("#69b3a2", "#404080"), labels = c('No PCOS', 'PCOS')) +
xlab("# of Patients") +
ylab("Hair Growth") +
ggtitle("Number of Patients Experiencing Hair Growth") +
labs(fill = "")
ggplot(data = PCOS_df, aes(y = `hair growth(Y/N)`, fill = `PCOS (Y/N)`)) +
geom_bar(width = 0.40, color="#e9ecef", alpha=0.6, position = position_dodge(0.40)) +
geom_hline(aes(yintercept = 2, color = "Patient Value"), linetype = "dashed", size = 1) +
scale_fill_manual(values=c("#69b3a2", "#404080"), labels = c('No PCOS', 'PCOS')) +
xlab("# of Patients") +
ylab("Hair Growth") +
ggtitle("Number of Patients Experiencing Hair Growth") +
labs(fill = "", color = NULL)
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
typeof(confusionMatrix(test$`PCOS (Y/N)`, sig_feat_model2_preds))
confusionMatrix(test$`PCOS (Y/N)`, sig_feat_model2_preds)
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
shiny::runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
library(rsconnect)
shiny::runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
install.packages("Rcpp")
install.packages("Rcpp")
shiny::runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
rsconnect::showLogs()
runApp('NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool')
getwd()
setwd("~/NYCDS_Bootcamp/00_Project 2/PCOS_Diagnostic_Tool")
runApp()
